{
    "contents" : "require(googlesheets)\nrequire(dplyr)\nrequire(tidyr)\nrequire(stringr)\nrequire(lubridate)\nrequire(rio)\n\n################################################################################ \n##                  Read the raw data from the Google Sheets                  ##\n################################################################################\n\n## ~~~ Download the key for the HS Pre-Test ~~~\nPreKey <- gs_title(\"HS Responses ('16)\") %>% gs_read_csv(\"HS_Test-Pre Key\")\n\n\n## ~~~ Download the HS Pre-Test and score it ~~~\ngs_title(\"HS Responses ('16)\") %>% gs_read_csv(\"HS_Test-Pre\") %>%\n  # Drop sensetive columns & make the data tidy\n  select(-Timestamp, -Score, -`Camper Name`, -`Cohort ID`) %>% \n  gather(QID, Response, -SID) %>%\n  filter(QID!=\"Q08 [NS]\") %>% # filter out duplicate\n  \n  # Join with the answer key, and preform scoring\n  left_join(select(PreKey, QID, Answer)) %>%\n  mutate(isCorrect = if_else(Response==Answer, T, F)) %>%\n  mutate(Score     = if_else(Response==Answer, \"Correct\", \"Wrong\")) %>%\n  \n  # Seperate out the question topics\n  mutate(\n    Topic = str_extract(QID, \"\\\\[..\\\\]\"),\n    Topic = str_replace_all(Topic, \"\\\\[|\\\\]\", \"\"),\n    QID  = str_replace(QID, \" \\\\[..\\\\]\", \"\")) %>%\n  left_join(\n    data_frame(\n      Topic = c(\"CP\", \"ID\", \"MB\", \"NS\", \"PH\"),\n      TopicFull = c(\"Cardiopulmonary\", \"Infectious Disease\",\n                    \"Microbiology\", \"Neuroscience\", \"Pharmacy\"))) %>% \n  rename(Topic.Abbv=Topic, Topic=TopicFull) %>% export(\"HS/Data/Pre/Test.csv\")\n\n\n## ~~~ Download the HS Post-Test and score it ~~~\ngs_title(\"HS Responses ('16)\") %>% gs_read_csv(\"HS_Test-Post\") %>%\n  # Drop sensetive columns & make the data tidy\n  select(SID=`Camper ID`, `Q01 [PH]`:`Q20 [ID]`) %>% \n  gather(QID, Response, -SID) %>%\n  filter(QID!=\"Q08 [NS] DONT ANSWER\") %>% # filter out duplicate\n  \n  # Join with the answer key, and preform scoring\n  left_join(select(PreKey, QID, Answer)) %>%\n  mutate(isCorrect = if_else(Response==Answer, T, F)) %>%\n  mutate(Score     = if_else(Response==Answer, \"Correct\", \"Wrong\")) %>%\n  \n  # Seperate out the question topics\n  mutate(\n    Topic = str_extract(QID, \"\\\\[..\\\\]\"),\n    Topic = str_replace_all(Topic, \"\\\\[|\\\\]\", \"\"),\n    QID  = str_replace(QID, \" \\\\[..\\\\]\", \"\")) %>%\n  left_join(\n    data_frame(\n      Topic = c(\"CP\", \"ID\", \"MB\", \"NS\", \"PH\"),\n      TopicFull = c(\"Cardiopulmonary\", \"Infectious Disease\",\n                    \"Microbiology\", \"Neuroscience\", \"Pharmacy\"))) %>% \n  rename(Topic.Abbv=Topic, Topic=TopicFull) %>% export(\"HS/Data/Post/Test.csv\")\n\n\n\n\n\n\n\n\n## ~~~ Download the short answer data from HS Pre-Survey ~~~\ngs_title(\"HS Responses ('16)\") %>% \n  gs_read_csv(\"HS_Info-Pre\") %>%\n  select(SID, Q1:Q3, Q10, Q6a, Q6b) %>%\n  export(\"HS/Data/Pre/Written.csv\")\n\n## ~~~ Download the AP data from HS Pre-Survey ~~~\ngs_title(\"HS Responses ('16)\") %>% \n  gs_read_csv(\"HS_Info-Pre\") %>%\n  select(SID, contains(\"Q9\")) %>%\n  gather(AP, Response, -SID) %>%\n  mutate(AP = str_extract(AP, \"\\\\[.+\\\\]\")) %>%\n  mutate(AP = str_replace_all(AP, \"\\\\[|\\\\]\", \"\")) %>%\n  filter(Response!=\"\", Response!=\"Not offered\") %>%\n  mutate(\n    Have = if_else(Response==\"Taken\", T, F),\n    Plan = if_else(Response==\"Taken\"|Response==\"Plan to take\", T, F)) %>%\n  select(-Response) %>%\n  export(\"HS/Data/AP.csv\")\n\n## ~~~ Determine the EO for each response ~~~\n# Order of education\nedu.levels <- c(\"N/A\", \"Primary Education only\", \"Some high school\", \n                \"High school graduate\", \"Some college\", \"Associate degree\", \n                \"Bachelorâ€™s degree\", \"Post graduate degree\", \"Doctoral degree\")\n\ngs_title(\"HS Responses ('16)\") %>% gs_read_csv(\"HS_Info-Pre\") %>%\n  # Select the education level \n  select(SID, Q13a, Q13c, Q14a, Q14c) %>%\n  mutate(# Q15a = na_if(Q15a, \"N/A\"),\n    Q13a = factor(Q13a, levels = edu.levels, ordered = T),\n    Q14a = factor(Q14a, levels = edu.levels, ordered = T)) %>%\n  # If single parent household\n  mutate(SPH = if_else(Q13a==\"N/A\"|Q14a==\"N/A\", T, F)) %>%\n  rename(Edu_Mom=Q13a, Edu_Dad=Q14a, \n         EO_Mom=Q13c, EO_Dad=Q14c) %>%\n  # Tidy, spread, then cast the data \n  gather(key, value, -SID, -SPH) %>% \n  separate(key, c(\"Measure\", \"Person\")) %>%\n  spread(Measure, value, convert=T) %>%\n  # Clean it up again & group by student ID\n  mutate(Edu = factor(Edu, levels = edu.levels, ordered = T)) %>%\n  filter(!is.na(EO)) %>% group_by(SID, SPH) %>% \n  # Collapse into two numeric vars and an ordered factor\n  summarise(\n    EO.sum = sum(EO),\n    EO = max(EO), \n    Edu = max(Edu)) %>%\n  mutate(Edu = factor(Edu, levels = edu.levels, ordered = T)) %>%\n  \n  # Write a RDS & CSV file\n  export(\"HS/Data/EO.RDS\")\nimport(\"HS/Data/EO.RDS\") %>% export(\"HS/Data/EO.csv\")\n  \n\n\n\n## ~~~ Download selected variables from HS Pre-Survey ~~~\ngs_title(\"HS Responses ('16)\") %>% \n  gs_read_csv(\"HS_Info-Pre\") %>%\n  # Select columns\n  select(-Timestamp, -`Cohort ID`, -`Camper Name`) %>% \n  select(SID, \n         Q8, Q11, Q12, # Numerical scales\n         Q4, Q5, Q17,  # Factors\n         Q6a, Q7, Q16, Q18) %>% # CSV factors\n         \n\n## >> Languages Spoken at Home (Q16):\n## Students listed the languages spoken in their home in decreasing order of \n## frequency. From these responses, five language variables were calculated: \n##   ML - Multilingual household\n##   PHLOTE - Primary home language other than english\n##   NES - Non-english speaker, meaning meaning english is *not* spoken at all\n##   L1 - Primary language\n##   L2 - Secondary language\n  mutate(\n    ML     = str_detect(Q16, \",\"),\n    PHLOTE = if_else(grepl(\"^Eng\", Q16), F, T),\n    NES =  if_else(str_detect(tolower(Q16), \"english\"), F, T)) %>%\n  \n## >> Gender Identification (Q17): \n## Students were asked to select one or more boxes describing their gender \n## identification. The options the were provided are as follows: 'Female', \n## 'Male', and/or 'I'd prefer not answer'. Additionally, students were allowed \n## to write in their own responses. For the purpose of analysis, all respponses  \n## other than male or female have been categorized as \"Other\".\n  mutate(Gender = if_else(Q17!=\"Male\"&Q17!=\"Female\", \"Other\", Q17)) %>%\n  \n## > Race/Ethnicity Identification (Q18):\n## Students were asked to select one or more boxes describing their racial/\n## ethnic identification among the options 'White', 'Hispanic or Latina/o', \n## 'Asian', 'American Indian or Alaska Native', and 'Native Hawaiian or Other \n## Pacific Islander'. Similar to the Gender identification question, respondants \n## also were given the option to write-in responses or select 'I'd prefer not \n## answer'. Given the survey's limitations on this question (e.g. combining the \n## ethnicity question with the race question, the social construction of race)\n## these data were simplified into simple factors using the following heuristic:\n##  1. If the Hispanic/Latina ethnicity was selected, the response was \n##     categorized as `Hispanic (any combo)` regardless of race\n##  2. If white, black, or Asian was the only response given, the response was \n##     categorized as `White alone`, `Black alone`, or `Asian alone`\n##  3. All other responses (including write-ins) were aggregated into `Other/2+ \n##     Race ID`\n## The detailed Race/Ethnicity ID data are available in the \"Demographics\" table\n  mutate(\n    Race = Q18,\n    Race = if_else(Race==\"White\", \"White alone\", Race),\n    Race = if_else(Race==\"Black or African American\", \"Black alone\", Race),\n    Race = if_else(Race==\"Asian\", \"Asian alone\", Race),\n    Race = if_else(str_detect(Race, \"Hispanic or Latina/o\"), \n                   \"Hispanic (any combo)\", Race),\n    Race = if_else(str_detect(Race, \",\"), \"2+ Race ID\", Race),\n    Race = if_else(str_detect(Race, \"alone\")|str_detect(Race, \"Hispanic\"), \n                   Race, \"Other/2+ Race ID\")) %>%\n  \n  # Drop these three old variables, make factors, and export\n  select(-Q16, -Q17, -Q18) %>% rename(GradeLvl=Q5, School=Q4) %>%\n  mutate(\n    Race = as.factor(Race),\n    Gender = as.factor(Gender),\n    School = as.factor(School),\n    GradeLvl = as.factor(GradeLvl)) %>% \n  \n  # Join in the `EO` table for SES indicator\n  left_join(import(\"HS/Data/EO.RDS\")) %>%\n  \n  # Calculate pre-test scores and join resulting table\n  left_join({import(\"HS/Data/Pre/Test.csv\") %>% \n      group_by(SID) %>% summarise(Score = sum(isCorrect)/n())}) %>%\n  \n  # Calculate post-test scores and join resulting table\n  left_join({import(\"HS/Data/Post/Test.csv\") %>% \n      group_by(SID) %>% summarise(Score2 = sum(isCorrect)/n())}) %>%\n  \n  # Calculate planned AP courses and join\n  left_join({import(\"HS/Data/AP.csv\") %>% \n      group_by(SID) %>% summarise(AP = sum(Plan))}) %>%\n  # Export\n  export(\"HS/Data/Pre/Survey.RDS\")\n\n\n# PreI <- import(\"Data/2016/HS/Info-Pre.csv\", setclass=\"tbl_df\")\n\n#~# TO DO\n#~# 1. Codify jobs as EMP or SCL\n#~# 2. Determine EO\n#~# 3. Build suplemental table for race\n\n\n# import(\"Data/2016/HS/PreTest.csv\") %>% glimpse()\n",
    "created" : 1469715785940.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1675179241",
    "id" : "EF237FCE",
    "lastKnownWriteTime" : 1469821839,
    "path" : "~/Github/EDU/HSSC2016/Scripts/import_data.R",
    "project_path" : "Scripts/import_data.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}